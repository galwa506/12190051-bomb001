Phase_2

//Before diffusing the bomb we need to set a break point at phase2 and at explode bomb function inorder to prevent the explosion of the bomb.
// We can set the break point with the help of the command either with "b" or "break" 

(gdb) b phase_2
Breakpoint 3 at 0x400ea9
(gdb) b explode_bomb
Breakpoint 4 at 0x40143d

//After setting the break point, we need to check if it's workinig fine.
//Here, I gave a string "hey" which is not exactly right but just to test if the bereak point is working fine.

(gdb) run ans1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/galey/Documents/5 sem/computer System1/labwork/Assignment 1_2/Assignment 1/bomb001/bomb ans1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
a s

Breakpoint 3, 0x0000000000400ea9 in phase_2 () //This proves that the break point works.

//With the help of command "disas" We will be able to see the assembler code of phase_2 so that we can find the hidden code. 

(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	call   0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	call   0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	call   0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	call   0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	ret    
End of assembler dump.


//From line 36, we can figure out that the hidden code is an integer as the function says "read six_numbers".

Phase 1 defused. How about the next one?
0 1 2 3 4 5
//Here, I gave the above integers as the six numbers.
//I then directly jumped to line 37 to compare my first integer with the the number that is stored in the address 0x0 which is 0.
//Since 0==0, my first integer which is 0 is the correct integer. 
//After that, I traced the code of line 39, that compares 1 with the value of rsp+4.
//The value of rsp+4 appears to be 1 which is equal to the value 1 and if it wasn't equal then the bomb would have exploded so from here we can conclude that 1 is the correct second integer.
//The line 46 compares value at eax and 0x8(rbx). The value at eax is 1 whereas the value of 0x8(rbx) is 2 which is not equal(meaning my third given integer is incorrect). 
//So i again manipulated the value to 1 which is equal to the value at address eax so my third integer is 1.
//At line 50, i compared value of rbp with the value of rbx. Due to the loop, I re-executed line 46.  Here the eax value was 2 and the value 0x8(rbx) was 3 which is not equal.
//Therefore i again manipulated the fourth integer to 2 which is eaul to value of eax at line 46, hence it's the correct integer.
// Till the fourth integer, the value is 0 1 1 2, from which we can make out that it is a fibonacci series. The last two digits are 3 and 5.
//0 1 1 2 3 5 is the hidden solution.












